# -*- mode: ruby -*-
# vi: set ft=ruby :

PURPOSE = "k8s-cluster"
LIFECYCLE = "dev"
DOMAIN = "anytown.usa"

IMAGE = "ubuntu/bionic64"
PROVIDER = "virtualbox"
ROOT_KEY = "root_key.sh"
VAGRANT_KEY = "vagrant_key.sh"

CONTROLER_SCRIPT = "empty.sh"
MASTER_SCRIPT = "empty.sh"
NODE_SCRIPT = "empty.sh"
NODE_SCRIPT = "ubuntu.k8s.sh"
MASTER_SCRIPT = "ubuntu.k8s.sh"
CONTROLER_SCRIPT = "ubuntu.k8s.sh"

CONTROLER = "controller"
HOSTNAME_CONTROLER = "#{CONTROLER}.#{LIFECYCLE}.#{DOMAIN}"
VM_NAME_CONTROLER = "#{PURPOSE}_#{LIFECYCLE}_#{CONTROLER}"

MASTER = "master"
HOSTNAME_MASTER = "#{MASTER}.#{LIFECYCLE}.#{DOMAIN}"
VM_NAME_MASTER = "#{PURPOSE}_#{LIFECYCLE}_#{MASTER}"

NODE_COUNT = 2 ### CHANGING HERE HAS NO EFFECT ###
NODE = "node"
HOSTNAME_NODE = "#{NODE}.#{LIFECYCLE}.#{DOMAIN}"
VM_NAME_NODE = "#{PURPOSE}_#{LIFECYCLE}_#{NODE}"

$GENKEY = <<EOF
date > /etc/vagrant_provisioned_at
ssh-keygen -t rsa -b 4096 -f "/root/.ssh/provisioned_id_rsa.`date +%s`" -q -N ""
EOF

$SYNC_HOSTS_FILE = <<EOF
> /root/.ssh/known_hosts && chmod 600 /root/.ssh/known_hosts
echo 'for ip in 10.250.0.1 10.250.0.2 10.250.0.100 10.250.0.101; do
    ssh-keyscan -H ${ip} >> /root/.ssh/known_hosts; done
cp -f /root/.ssh/known_hosts /home/vagrant/.ssh/known_hosts \
   && chown vagrant:vagrant /home/vagrant/.ssh/known_hosts \
   && chmod 600 /home/vagrant/.ssh/known_hosts
' > /root/sync.hosts.sh
chmod 700 /root/sync.hosts.sh
/root/sync.hosts.sh
EOF

#sudo su -
#rm /home/vagrant/sync.hosts.sh
#> /home/vagrant/.ssh/known_hosts
#> /root/.ssh/known_hosts

VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

###
##
#   for ip in 10.250.0.1 10.250.0.2 10.250.0.100 10.250.0.101; do ssh -o stricthostkeychecking=off ${ip}; done
##
###
### CONTROLER ###
   config.vm.define "#{CONTROLER}" do |subconfig|
      subconfig.vm.box = "#{IMAGE}"
      subconfig.vm.hostname = "#{CONTROLER}.#{PURPOSE}.#{LIFECYCLE}.#{DOMAIN}"
      subconfig.vm.provider "#{PROVIDER}" do |v|
         v.name = "#{VM_NAME_CONTROLER}"
         #v.memory = 2048
      end
      subconfig.vm.provision "shell", run: "once", path: "#{CONTROLER_SCRIPT}"
      subconfig.vm.provision "shell", run: "once", path: "#{ROOT_KEY}"
      subconfig.vm.provision "shell", run: "once", path: "#{VAGRANT_KEY}"
      subconfig.vm.provision "shell", run: "once", inline: $SYNC_HOSTS_FILE
      subconfig.vm.provision "shell", run: "never", inline: $GENKEY

      PORT = 2400
      subconfig.vm.network "private_network", ip: "10.250.0.100", virtualbox__intnet: "anytownusa"
   end
### CONTROLER ###

### MASTER ###
   config.vm.define "#{MASTER}" do |subconfig|
      subconfig.vm.box = "#{IMAGE}"
      subconfig.vm.hostname = "#{MASTER}.#{PURPOSE}.#{LIFECYCLE}.#{DOMAIN}"
      subconfig.vm.provider "#{PROVIDER}" do |v|
         v.name = "#{VM_NAME_MASTER}"
         #v.memory = 2048
      end
      subconfig.vm.provision "shell", run: "once", path: "#{MASTER_SCRIPT}"
      subconfig.vm.provision "shell", run: "once", path: "#{ROOT_KEY}"
      subconfig.vm.provision "shell", run: "once", path: "#{VAGRANT_KEY}"
      subconfig.vm.provision "shell", run: "once", inline: $SYNC_HOSTS_FILE
      subconfig.vm.provision "shell", run: "never", inline: $GENKEY

      PORT = 2300
      subconfig.vm.network "private_network", ip: "10.250.0.101", virtualbox__intnet: "anytownusa"
   end
### MASTER ###

### NODES ###
NODE_COUNT = 2
   (1..NODE_COUNT).each do |i|
      config.vm.define "#{NODE}#{i}" do |subconfig|
         subconfig.vm.box = "#{IMAGE}"
         subconfig.vm.hostname = "#{NODE}#{i}.#{PURPOSE}.#{LIFECYCLE}.#{DOMAIN}"
         subconfig.vm.provider "#{PROVIDER}" do |v|
           v.name = "#{VM_NAME_NODE}#{i}"
           #v.memory = 2048
         end
         subconfig.vm.provision "shell", run: "once", path: "#{NODE_SCRIPT}"
         subconfig.vm.provision "shell", run: "once", path: "#{ROOT_KEY}"
         subconfig.vm.provision "shell", run: "once", path: "#{VAGRANT_KEY}"
         subconfig.vm.provision "shell", run: "once", inline: $SYNC_HOSTS_FILE
         subconfig.vm.provision "shell", run: "never", inline: $GENKEY

         PORT = 2300 + i
         subconfig.vm.network "private_network", ip: "10.250.0.#{i}", virtualbox__intnet: "anytownusa"
      end
   end
### NODES ###

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

end
